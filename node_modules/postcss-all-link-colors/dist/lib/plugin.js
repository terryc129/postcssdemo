'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var errorContext = {
    plugin: 'postcss-all-link-colors'
};
var pseudoClassesPattern = /^(visited|focus|hover|active)$/;
exports['default'] = _postcss2['default'].plugin('postcss-all-link-colors', function () {
    return function (root) {
        root.walkAtRules('link-colors', function (atRule) {
            var _postcss$list$space = _postcss2['default'].list.space(atRule.params);

            var _postcss$list$space2 = _toArray(_postcss$list$space);

            var all = _postcss$list$space2[0];
            var inputColor = _postcss$list$space2[1];

            var rest = _postcss$list$space2.slice(2);

            var isColorCloned = all === 'all';
            var color = inputColor;
            if (!isColorCloned) {
                if (color) {
                    rest.unshift(color);
                }
                color = all;
            }
            if (!color) {
                throw atRule.error('Missing color parameter', errorContext);
            }
            if (rest.length) {
                throw atRule.error('Too many parameters: ' + rest.join(' '), errorContext);
            }
            var colorDecl = _postcss2['default'].decl({
                prop: 'color',
                value: color
            }).moveBefore(atRule);
            var overrides = {};
            var declarationCount = 0;
            var isFocusBeforeHover = true;
            atRule.walkDecls(pseudoClassesPattern, function (decl) {
                declarationCount++;
                if (/^(focus|hover)$/.test(decl.prop)) {
                    isFocusBeforeHover = decl.prop === 'hover';
                }
                var rule = _postcss2['default'].rule({
                    selector: atRule.parent.selectors.map(function (selector) {
                        return selector + ':' + decl.prop;
                    }).join(', ')
                });
                rule.raws.semicolon = atRule.raws.semicolon;
                decl.moveTo(rule);
                overrides[decl.prop] = rule;
                decl.prop = 'color';
            });
            atRule.walkDecls(function (decl) {
                throw decl.error('Unsupported property: ' + decl.prop, errorContext);
            });
            if (!isColorCloned && declarationCount === 0) {
                throw atRule.error('Missing at-rule body. Did you mean @link-colors all ' + color + '?', errorContext);
            }
            var pseudoClasses = ['visited'].concat(isFocusBeforeHover ? ['focus', 'hover'] : ['hover', 'focus']).concat('active').reverse();
            pseudoClasses.forEach(function (pseudoClass) {
                var override = overrides[pseudoClass];
                if (override) {
                    override.moveAfter(atRule.parent);
                    return;
                }
                if (!isColorCloned) {
                    return;
                }
                var rule = _postcss2['default'].rule({
                    selector: atRule.parent.selectors.map(function (selector) {
                        return selector + ':' + pseudoClass;
                    }).join(', ')
                });
                rule.raws.semicolon = atRule.raws.semicolon;
                colorDecl.cloneAfter().moveTo(rule);
                rule.moveAfter(atRule.parent);
            });
            atRule.remove();
        });
    };
});
module.exports = exports['default'];