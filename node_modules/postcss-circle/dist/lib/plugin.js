'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var errorContext = {
    plugin: 'postcss-circle'
};
exports['default'] = _postcss2['default'].plugin('postcss-circle', function () {
    return function (root) {
        root.walkRules(function (rule) {
            rule.walkDecls('circle', function (decl) {
                var _postcss$list$space = _postcss2['default'].list.space(decl.value);

                var _postcss$list$space2 = _slicedToArray(_postcss$list$space, 2);

                var diameter = _postcss$list$space2[0];
                var color = _postcss$list$space2[1];

                if (!/^\d/.test(diameter)) {
                    var _ref = [color, diameter];
                    diameter = _ref[0];
                    color = _ref[1];
                }
                if (!diameter) {
                    throw decl.error('Missing diameter', errorContext);
                }
                decl.cloneBefore({
                    prop: 'border-radius',
                    value: '50%'
                });
                if (color) {
                    decl.cloneAfter({
                        prop: 'background-color',
                        value: color
                    });
                }
                decl.prop = 'width';
                decl.value = diameter;
                decl.cloneAfter({ prop: 'height' });
            });
        });
    };
});
module.exports = exports['default'];